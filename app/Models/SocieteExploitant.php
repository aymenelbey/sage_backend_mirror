<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use App\Models\SocieteExpSite;
use App\Models\Site;

use App\Traits\DeleteChecks;

class SocieteExploitant extends TrackableModel
{
    use HasFactory,SoftDeletes, DeleteChecks;
    public $deleteChecks = ['sites', 'contacts', 'files'];
    protected $primaryKey = "id_societe_exploitant";
    protected $fillable = [
        "groupe",
        "denomination",
        "serin",
        "siret",
        "logo",
        "codeape",
        "adresse",
        "lat",
        "lang",
        "siteInternet",
        "telephoneStandrad",
        "effectifs",
        "date_enter",
        'nature_juridique',
        "city",
        "sinoe",
        "country",
        "postcode",
        'id_user_premieum',
        'updated_by',
        'status',
        'status_updated_by'
    ];
    protected $casts = [
        'groupe' => 'array',
    ];

    protected $hidden = ['id_user_premieum'];
    protected $dates = ['deleted_at'];
    public function contacts(){
        return $this->belongsToMany(Contact::class, ContactHasPersonMoral::class,'idPersonMoral','id_contact','id_societe_exploitant','id_contact')
        ->wherePivot('deleted_at', null);
    }
    public function logo(){
        return $this->hasMany(ImageSage::class,"uid","logo");
    }
    public function groupe(){
        return $this->hasMany(Enemuration::class,'id_enemuration', 'groupe');
    }

    public function getGroupe(){
        return SocieteExploitant::getGroupeStatic($this->groupe);
    }
    public static function getGroupeStatic($groupeIDS){
        $groupe = [];
        if($groupeIDS && !empty($groupeIDS)){
            if(is_array($groupeIDS)){
                $groupe = $groupeIDS;
            }else{
                $groupe = json_decode($groupeIDS);
                if(!is_array($groupe)){
                    return [];
                }
            }
        }else{
            return [];
        }
        $groupe = Enemuration::whereIn('id_enemuration', $groupe)->get();
        return $groupe;
    }

    public function nature_juridique(){
        return $this->hasOne(Enemuration::class,'id_enemuration', 'nature_juridique');
    }
    public function codeape(){
        return $this->hasOne(Enemuration::class,'id_enemuration', 'codeape');
    }
    public function withEnums(){
        
        $groupe = $this->getGroupe();

        $nat=$this->hasOne(Enemuration::class, 'id_enemuration', 'nature_juridique')->first();
        $cap=$this->hasOne(Enemuration::class,'id_enemuration', 'codeape')->first();
        
        $this->groupe = $groupe;

        $this->codeape=$cap?$cap->__toString():'';
        $this->nature_juridique=$nat?$nat->__toString():'';
    }
    public function sites(){
        return $this->hasManyThrough(Site::class,  SocieteExpSite::class, 'id_client', 'id_site', 'id_societe_exploitant', 'id_site');
        // return $this->hasMany(SocieteExpSite::class, "id_client", "id_societe_exploitant");
    }
    public function updated_by(){
        return $this->hasOne(Admin::class, 'id_admin', 'updated_by');
    }
    
    public function effectif_history(){
        return InfoClientHistory::with('updated_by')->where('referenced_table', 'Societe')->where('id_reference', $this->id_societe_exploitant)->orderBy('date_reference', 'DESC');
    }
    public function files(){
        return GEDFile::with('category')->where('type', 'societe_exploitants')->where('entity_id', $this->id_societe_exploitant);
    }
}