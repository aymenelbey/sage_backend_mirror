<?php

namespace App\Http\Controllers;

use App\Models\SocieteExploitant;
use App\Models\SocieteExpSite;
use App\Models\SocieteExp;
use App\Models\ImageSage;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Validator;
use Illuminate\Validation\Rule;

class SocieteExploitantController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request){
        $search=$request->get('search');
        $typeJoin=$request->get('typeFilter');
        $serin=$request->get('serin');$serin=$serin?$serin:$search;
        $address=$request->get('address');$address=$address?$address:$search;
        $denomination=$request->get('denomination');$denomination=$denomination?$denomination:$search;
        $telephoneStandrad=$request->get('telephoneStandrad');$telephoneStandrad=$telephoneStandrad?$telephoneStandrad:$search;
        $nature_juridique=$request->get('nature_juridique');
        $codeape=$request->get('codeape');
        $groupe=$request->get('groupe');
        $sort=$request->get('sort');
        $sorter=$request->get('sorter');
        $function='where';
        $funHas='whereHas';
        $pageSize=$request->get('pageSize')?$request->get('pageSize'):20;
        $societeQuery = SocieteExploitant::query();
        if($serin){
            $societeQuery=$societeQuery->{$function}("serin","ILIKE","%{$serin}%");
            $function=$typeJoin=="inter"?"where":"orWhere";
            $funHas=$typeJoin=="inter"?"whereHas":"orWhereHas";
        }
        if($address){
            $societeQuery=$societeQuery->{$function}("adresse","ILIKE","%{$address}%");
            $function=$typeJoin=="inter"?"where":"orWhere";
            $funHas=$typeJoin=="inter"?"whereHas":"orWhereHas";
        }
        if($denomination){
            $societeQuery=$societeQuery->{$function}("denomination","ILIKE","%{$denomination}%");
            $function=$typeJoin=="inter"?"where":"orWhere";
            $funHas=$typeJoin=="inter"?"whereHas":"orWhereHas";
        }
        if($telephoneStandrad){
            $societeQuery=$societeQuery->{$function}("telephoneStandrad","ILIKE","%{$telephoneStandrad}%");
            $function=$typeJoin=="inter"?"where":"orWhere";
            $funHas=$typeJoin=="inter"?"whereHas":"orWhereHas";
        }
        if($nature_juridique){
            $societeQuery=$societeQuery->{$funHas}("nature_juridique",function($query)use($nature_juridique){
                $query->where('value_enum', 'ILIKE', "%{$nature_juridique}%");
            });
            $function=$typeJoin=="inter"?"where":"orWhere";
            $funHas=$typeJoin=="inter"?"whereHas":"orWhereHas";
        }
        if($codeape){
            $societeQuery=$societeQuery->{$funHas}("codeape",function($query)use($codeape){
                $query->where('value_enum', 'ILIKE', "%{$codeape}%");
            });
            $function=$typeJoin=="inter"?"where":"orWhere";
            $funHas=$typeJoin=="inter"?"whereHas":"orWhereHas";
        }
        if($groupe){
            $societeQuery=$societeQuery->{$funHas}("groupe",function($query)use($groupe){
                $query->where('value_enum', 'ILIKE', "%{$groupe}%");
            });
            $function=$typeJoin=="inter"?"where":"orWhere";
            $funHas=$typeJoin=="inter"?"whereHas":"orWhereHas";
        }
        if(in_array($sort,['ASC','DESC']) && in_array($sorter,['groupe','denomination','serin','codeape','adresse','telephoneStandrad','effectifs','nature_juridique'])){
            $societeQuery=$societeQuery->orderBy($sorter,$sort);
        }else{
            $societeQuery=$societeQuery->orderBy("updated_at","DESC");
        }
        $societes=$societeQuery->paginate($pageSize);
        $societes->map(function($societe){
           $societe->withEnums();
        });
        return response([
            "ok"=>true,
            "data"=>$societes
        ],200);
    }
    public function siteExploitBySociete(Request $request){
        SocieteExploitant::where("id_societe");
    }
    public function add(Request $request){
        $validator = Validator::make($request->all(),[
            "id_societe_exploitant"=> ["required","exists:societe_exploitants"],
            "id_sites"=>["required"]
        ],[
            "id_societe_exploitant.exists"=>"Societe d'exploitation n'existe pas",
            "id_sites.required"=>"Les sites sont obligatoires",
            "id_societe_exploitant.required"=>"La société d'exploitation est obligatoire"
        ]);
        if($validator->fails()){
            return response([
                "ok"=>false,
                "message"=>$validator->errors()
            ],400);
        }
        foreach($request["id_sites"] as $id){
            $vald = Validator::make(["id_site"=>$id],["id_site"=>"exists:sites"],["id_site.exists"=>"Le site n'existe pas" ]);
            if($vald->fails()){
                return response([
                    "ok"=>false,
                    "message"=>$vald->errors()
                ],400);
            }
        }
        $array_sites = [];
        foreach($request["id_sites"] as $id){
            $soc = SocieteExpSite::where("id_site","=",$id)->where("typeExploitant","=","Societe")->select("id_societe_exp_site")->first();
            if(!$soc){
                $soc = SocieteExpSite::create([
                    "typeExploitant"=>"Societe",
                    'id_site'=>$id
                ]);
            }
            $temp = [
                "id_societe_exp_site"=>$soc->id_societe_exp_site,
                "id_societe_exploitant"=>$request["id_societe_exploitant"],
                "created_at"=>Carbon::now(),
                "updated_at"=>Carbon::now()
            ];
            array_push($array_sites,$temp);
        }
        $socExp = SocieteExp::insert($array_sites);
        return response([
            "ok"=>true,
            "message"=>$socExp
        ],200);
    }
    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create(Request $request){
        $this->validate($request,[
            "groupe"=>["required","exists:enemurations,id_enemuration"],
            "codeape"=>['required'],
            "adresse"=>['required'],
            "denomination"=>["required"],
            "serin"=>["required"],
            'nature_juridique'=>["required","exists:enemurations,id_enemuration"],
            "effectifs"=>["numeric"]
        ]);
        $societe = SocieteExploitant::create([
            "groupe"=>$request["groupe"],
            "denomination"=>$request["denomination"],
            "serin"=>$request["serin"],
            "codeape"=>$request["codeape"],
            "adresse"=>$request["adresse"],
            "logo"=>$request["logo"],
            "lat"=>$request['lat'],
            "lang"=>$request['lang'],
            "siteInternet"=>isset($request["siteInternet"])?$request["siteInternet"]:null,
            "telephoneStandrad"=>isset($request["telephoneStandrad"])?$request["telephoneStandrad"]:null,
            "effectifs"=>isset($request["effectifs"])?$request["effectifs"]:null,
            "nature_juridique"=>$request["nature_juridique"]
        ]);
        return response([
            "ok"=>true,
            "data"=>$societe
        ],200);
    }
    /**
     * Display the specified resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function show(Request $request)
    {
        $idCompany=$request['idcompany'];
        if(!empty($idCompany)){
            $societe=SocieteExploitant::with(['contacts','logo'])->find($idCompany);
            $societe=$societe->toArray();
            if(!empty($societe["logo"][0])){
                $societe["logo"]=$societe["logo"][0]["url"];
            }
            return response([
                'ok'=>true,
                'data'=>$societe
            ],200);
        }
        return response([
            'ok'=>'server',
            'errors'=>'Aucune société disponible'
        ],400);
       
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function edit(Request $request)
    {
        $soceExp = SocieteExploitant::with("logo")->find($request["idSociete"]);
        if($soceExp){
            return response([
                "ok"=>true,
                "data"=>$soceExp
            ],200);
        }
        return response([
            "ok"=>"server",
            "errors"=>"Societé n'existe pas"
        ],400);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request){
        $this->validate($request,[
            "id_societe_exploitant"=>["required","exists:societe_exploitants"],
            "groupe"=>["required","exists:enemurations,id_enemuration"],
            "codeape"=>['required',"exists:enemurations,id_enemuration"],
            "adresse"=>['required'],
            "denomination"=>["required"],
            "serin"=>["required"],
            'nature_juridique'=>["required","exists:enemurations,id_enemuration"],
            "effectifs"=>["numeric"]
        ]);
        $soceExp = SocieteExploitant::find($request["id_societe_exploitant"]);
        $socU = $soceExp->update($request->all());
        return response([
            "ok"=>true,
            "data"=>"Societé modifiée avec succée"
        ],200);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\SocieteExploitant  $societeExploitant
     * @return \Illuminate\Http\Response
     */
    public function destroy(Request $request)
    {
        if(isset($request['societes']) && is_array($request['societes'])){
            $deletedLis=[];
            foreach($request['societes'] as $societe){
                $soci=SocieteExploitant::find($societe);
                if($soci){
                    $deletedLis [] = $societe;
                    $soci->delete();
                }
            }
            return response([
                'ok'=>true,
                'data'=>"async",
                'societes'=>$deletedLis
            ]);
        }
        return response([
            'ok'=>true,
            'data'=>"no action"
        ]);
    }
}