<?php

namespace App\Http\Controllers;

use Illuminate\Validation\Rule;


use App\Http\Helpers\ToolHelper;

use App\Models\InfoClientHistory;
use App\Models\SocieteExploitant;
use App\Models\SocieteExpSite;
use App\Models\Enemuration;
use App\Models\SocieteExp;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Validator;
use App\Jobs\Export\ExportSocietes;
use App\Rules\Siren;
use App\Rules\Siret;
use App\Exports\ArrayExport;
use Maatwebsite\Excel\Facades\Excel;
use App\Http\Helpers\ExportHelper;

class SocieteExploitantController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request){
        $search=$request->get('search');
        $typeJoin=$request->get('typeFilter');
        $serin=$request->get('serin');$serin=$serin?$serin:$search;
        $address=$request->get('address');$address=$address?$address:$search;
        $denomination=$request->get('denomination');$denomination=$denomination?$denomination:$search;
        $telephoneStandrad=$request->get('telephoneStandrad');$telephoneStandrad=$telephoneStandrad?$telephoneStandrad:$search;
        $nature_juridique=$request->get('nature_juridique');
        $codeape=$request->get('codeape');
        $groupe=$request->get('groupe');
        $sort=$request->get('sort');
        $sorter=$request->get('sorter');
        $function='where';
        $funHas='whereHas';
        $pageSize=$request->get('pageSize')?$request->get('pageSize'):20;
        $societeQuery = SocieteExploitant::query();
        if($serin){
            $societeQuery=$societeQuery->{$function}("serin","ILIKE","%{$serin}%");
            $function=$typeJoin=="inter"?"where":"orWhere";
            $funHas=$typeJoin=="inter"?"whereHas":"orWhereHas";
        }
        if($address){
            $societeQuery=$societeQuery->{$function}("adresse","ILIKE","%{$address}%");
            $function=$typeJoin=="inter"?"where":"orWhere";
            $funHas=$typeJoin=="inter"?"whereHas":"orWhereHas";
        }
        if($denomination){
            $societeQuery=$societeQuery->{$function}("denomination","ILIKE","%{$denomination}%");
            $function=$typeJoin=="inter"?"where":"orWhere";
            $funHas=$typeJoin=="inter"?"whereHas":"orWhereHas";
        }
        if($telephoneStandrad){
            $societeQuery=$societeQuery->{$function}("telephoneStandrad","ILIKE","%{$telephoneStandrad}%");
            $function=$typeJoin=="inter"?"where":"orWhere";
            $funHas=$typeJoin=="inter"?"whereHas":"orWhereHas";
        }
        if($nature_juridique){
            $societeQuery=$societeQuery->{$funHas}("nature_juridique",function($query)use($nature_juridique){
                $query->where('value_enum', 'ILIKE', "%{$nature_juridique}%");
            });
            $function=$typeJoin=="inter"?"where":"orWhere";
            $funHas=$typeJoin=="inter"?"whereHas":"orWhereHas";
        }
        if($codeape){
            $societeQuery=$societeQuery->{$funHas}("codeape",function($query)use($codeape){
                $query->where('value_enum', 'ILIKE', "%{$codeape}%");
            });
            $function=$typeJoin=="inter"?"where":"orWhere";
            $funHas=$typeJoin=="inter"?"whereHas":"orWhereHas";
        }
        if($groupe){
            // $societeQuery = $societeQuery->whereExists(function ($query) use ($groupe){
            //     $query->select('*')->from('societe_exploitants')->whereIn('groupe', $query->select('*')->from('enemurations')->where('key_enum', 'groupeList')->where(['value_enum', 'ILIKE', "%{$groupe}%"]));
            // });
            // $societeQuery=$societeQuery->{$funHas}("groupe",function($query)use($groupe){
            //     $query->where('value_enum', 'ILIKE', "%{$groupe}%");
            // });
            // $function=$typeJoin=="inter"?"where":"orWhere";
            // $funHas=$typeJoin=="inter"?"whereHas":"orWhereHas";
        }
        if(in_array($sort,['ASC','DESC']) && in_array($sorter,['groupe','denomination','serin','codeape','adresse','telephoneStandrad','effectifs','nature_juridique'])){
            $societeQuery=$societeQuery->orderBy($sorter,$sort);
        }else{
            $societeQuery=$societeQuery->orderBy("updated_at","DESC");
        }
        $societes=$societeQuery->paginate($pageSize);
        $societes->map(function($societe){
           $societe->withEnums();
        });
        return response([
            "ok"=>true,
            "data"=>$societes
        ],200);
    }
    public function siteExploitBySociete(Request $request){
        SocieteExploitant::where("id_societe");
    }
    public function add(Request $request){
        $validator = Validator::make($request->all(),[
            "id_societe_exploitant"=> ["required","exists:societe_exploitants"],
            "id_sites"=>["required"]
        ],[
            "id_societe_exploitant.exists"=>"Societe d'exploitation n'existe pas",
            "id_sites.required"=>"Les sites sont obligatoires",
            "id_societe_exploitant.required"=>"La société d'exploitation est obligatoire"
        ]);
        if($validator->fails()){
            return response([
                "ok"=>false,
                "message"=>$validator->errors()
            ],400);
        }
        foreach($request["id_sites"] as $id){
            $vald = Validator::make(["id_site"=>$id],["id_site"=>"exists:sites"],["id_site.exists"=>"Le site n'existe pas" ]);
            if($vald->fails()){
                return response([
                    "ok"=>false,
                    "message"=>$vald->errors()
                ],400);
            }
        }
        $array_sites = [];
        foreach($request["id_sites"] as $id){
            $soc = SocieteExpSite::where("id_site","=",$id)->where("typeExploitant","=","Societe")->select("id_societe_exp_site")->first();
            if(!$soc){
                $soc = SocieteExpSite::create([
                    "typeExploitant"=>"Societe",
                    'id_site'=>$id
                ]);
            }
            $temp = [
                "id_societe_exp_site"=>$soc->id_societe_exp_site,
                "id_societe_exploitant"=>$request["id_societe_exploitant"],
                "created_at"=>Carbon::now(),
                "updated_at"=>Carbon::now()
            ];
            array_push($array_sites,$temp);
        }
        $socExp = SocieteExp::insert($array_sites);
        return response([
            "ok"=>true,
            "message"=>$socExp
        ],200);
    }
    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create(Request $request){
        $this->validate($request,[
            "groupe"=>["nullable","exists:enemurations,id_enemuration"],
            "codeape"=>['required'],
            "adresse"=>['required'],
            "city"=>["required"],
            "country"=>['required'],
            "postcode"=>['required'],
            "denomination"=>["required"],
            "serin"=> ["required","numeric", new Siren],
            "siret"=> ["nullable", "numeric", "unique:societe_exploitants", new Siret],
            'nature_juridique'=>["required","exists:enemurations,id_enemuration"],
            "effectifs"=>["numeric"],
            'sinoe' => ['unique:societe_exploitants,sinoe'],
            'telephoneStandrad'=>['nullable','phone:FR'],
            "status" => ['required']
        ],[],[
            'serin'=>'Siren',
            'siret'=>'Siret'
        ]);
        $societe = SocieteExploitant::create($request->only(["groupe","denomination","serin","siret","codeape","adresse","logo","lat","lang","siteInternet","telephoneStandrad","effectifs","nature_juridique","city","country","postcode","sinoe", 'status'])+['date_enter'=>Carbon::now()]);
        return response([
            "ok"=>true,
            "data"=>$societe
        ],200);
    }
    /**
     * Display the specified resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function show(Request $request)
    {
        $idCompany=$request['idcompany'];
        if(!empty($idCompany)){
            $societe=SocieteExploitant::with(['contacts','logo', 'sites', 'updated_by', 'status_updated_by'])->find($idCompany);
            $societe->withEnums();
                    
            $societe->effectif_history = $societe->effectif_history()->get();
            
            $societe['files'] = $societe->files()->get();
            foreach($societe['files'] as $file){
                $file->entity = $file->entity(); 
                $file->path = $file->getPath();
            }
            
            $societe=$societe->toArray();
            if(!empty($societe["logo"][0])){
                $societe["logo"]=$societe["logo"][0]["url"];
            }
            return response([
                'ok'=>true,
                'data'=>$societe
            ],200);
        }
        return response([
            'ok'=>'server',
            'errors'=>'Aucune société disponible'
        ],400);

    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function edit(Request $request)
    {
        $soceExp = SocieteExploitant::with("logo")->find($request["idSociete"]);
        if($soceExp){
            return response([
                "ok"=>true,
                "data"=>$soceExp
            ],200);
        }
        return response([
            "ok"=>"server",
            "errors"=>"Societé n'existe pas"
        ],400);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request){
        $this->validate($request,[
            "id_societe_exploitant"=>["required","exists:societe_exploitants"],
            "groupe"=>["nullable","exists:enemurations,id_enemuration"],
            "codeape"=>['required',"exists:enemurations,id_enemuration"],
            "adresse"=>['required'],
            "denomination"=>["required"],
            "serin"=> ["required","numeric", new Siren],
            "siret"=> ["nullable", "numeric", Rule::unique('societe_exploitants')->ignore($request["id_societe_exploitant"], 'id_societe_exploitant'), new Siret],
            'nature_juridique'=>["required","exists:enemurations,id_enemuration"],
            "effectifs"=>["numeric"],
            'telephoneStandrad'=>['nullable','phone:FR'],
            'status' => ['required'],
            'sinoe' => [ Rule::unique('societe_exploitants', 'sinoe')->ignore($request["id_societe_exploitant"], 'id_societe_exploitant') ],
        ],[],[
            'serin'=>'Siren',
            'siret'=>'Siret'
        ]);
        $soceExp = SocieteExploitant::find($request["id_societe_exploitant"]);
        $moreItems=[];

        if($soceExp->effectifs!=$request['effectifs']){
            $moreItems=[
                'effectifs'=>$request['effectifs'],
                'date_enter'=>Carbon::now()
            ];
            InfoClientHistory::customCreate([
                'id_reference'=>$soceExp->id_societe_exploitant,
                'referenced_table'=>"Societe",
                'referenced_column'=>'effectifs',
                'date_reference'=>$soceExp->date_enter,
                'prev_value'=>$soceExp->effectifs
            ]);
        }

        $soceExp->update($request->only(["groupe","denomination","serin","siret","codeape","adresse","logo","lat","lang","siteInternet","telephoneStandrad","nature_juridique","city","country","postcode","sinoe", 'status'])+$moreItems);
        return response([
            "ok"=>true,
            "data"=>"Societé modifiée avec succée"
        ],200);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\SocieteExploitant  $societeExploitant
     * @return \Illuminate\Http\Response
     */
    public function destroy(Request $request){
        if(isset($request['societes']) && is_array($request['societes'])){
            $deletedLis=[];
            $notDeletedLis=[];
            foreach($request['societes'] as $societe_id){
                try{
                    $societe = SocieteExploitant::find($societe_id);
                    if($societe){
                        $canDelete = $societe->canDelete();

                        if($canDelete['can']){
                            SocieteExploitant::destroy($societe_id);
                            $deletedLis[] = $societe_id;
                        }else{
                            $notDeletedLis[$societe_id] = $canDelete['errors'];
                        }

                    }
                }catch(Exeption $e){
                    $notDeletedLis[$societe_id] =  ['db.destroy-error'];
                }
                
                if(sizeof($request['societes']) == 1 && sizeof($notDeletedLis) == 1){
                    return response([
                        "errors" => true,
                        "message"=>"item already in use",
                        "reasons" => $notDeletedLis
                    ],402);
                }
            }

            return response([
                'ok'=>true,
                'data'=>"async",
                'societes'=> $deletedLis,
                'not_deleted'=> $notDeletedLis
            ]);

        }
        return response([
            'ok'=>true,
            'data'=>"no action"
        ]);
    }
    public function sync_api(Request $request){
        $token = ToolHelper::fetchInseeAPIToken();
        if($request->input('action') == 'sync_array'){
            if(SocieteExploitant::sync_api($token, $request->input('societies'))){
                return response([
                    'ok'=>true,
                    'data'=>"no action"
                ]);
            }
            return response([
                "errors" => true,
                'ok' => false,
                'data'=>"no action"
            ]);
        }else if($request->input('action') == 'sync_all'){
            \App\Jobs\SyncINSEEAPISocieteExploitant::dispatch($token, 'sync_all');
        }
    }

    public function export(Request $request) {
        ExportSocietes::dispatch($request->user(), "societes", "/client/companies");
        return response([
            "ok" => true,
            "data" => "no action",
        ], 200);
    }

    public function export_model(Request $request) {
        $status_values = ["VALIDATED" => "Validée / publiable", "NOT_VALIDATED" => "Non validée mais publiable", "NOT_PUBLISHED" => "Non publiable"];
        $structure = [
            "denomination" => "value",
            "groupe" => "enum_array",
            "adresse" => "value",
            "city" => "value",
            "country" => "value",
            "postcode" => "value",
            "serin" => "value",
            "siret" => "value",
            "sinoe" => "value",
            "nature_juridique" => "enum",
            "codeape" => "enum",
            "siteInternet" => "value",
            "telephoneStandrad" => "value",
            "effectifs" => "value",
            "status" => [
                "type" => "map",
                "values" => $status_values
            ]
        ];
        $mapping = [
            "serin" => "Siren",
            "adresse" => "Adresse",
            "denomination" => "Dénomination",
            "siret" => "Siret",
            "sinoe" => "Sinoe",
            "city" => "Ville",
            "country" => "Pays",
            "postcode" => "Code postal",
            "siteInternet" => "Site Internet",
            "nature_juridique" => "Nature juridique",
            "telephoneStandrad" => "Tél standard",
            "effectifs" => "Effectifs",
            "status" => "Statut de la fiche",
            "codeape" => "Code Ape",
            "groupe" => "Groupe"
        ];
        return Excel::download(new ArrayExport(ExportHelper::get_headings($structure, null, $mapping)), 'societes_export_model.xlsx');
    }
}