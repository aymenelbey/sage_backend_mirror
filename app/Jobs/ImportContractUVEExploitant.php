<?php

namespace App\Jobs;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldBeUnique;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use App\Imports\CollectionsImport;
use App\Exports\CollectionsExport;
use App\Models\Enemuration;
use App\Events\UserNotification;
use App\Notifications\DataImportsNotif;
use App\Models\DataTechnTMB;
use App\Models\User;
use App\Models\GestionnaireHasSite;
use App\Models\SocieteExpSite;
use App\Models\ClientHasSite;
use App\Models\SocieteExploitant;
use App\Models\Syndicat;
use App\Models\Commune;
use App\Models\EPIC;
use App\Models\CommunHasContrat;
use App\Models\DataTechn;
use App\Models\Contrat;
use App\Models\Site;
use App\Models\Region;
use App\Models\Departement;
use App\Http\Helpers\ToolHelper;
use App\Constants\Constants;
use Illuminate\Support\Facades\Log;

use Throwable;
use Excel;

class ImportContractUVEExploitant implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    protected $filepath;
    protected $user;
    /**
     * Create a new job instance.
     *
     * @return void
     */
    public function __construct($filepath,$user)
    {
        $this->filepath=$filepath;
        $this->user=$user;
    }

    /**
     * Execute the job.
     *
     * @return void
     */
    public function handle()
    {
        $dataImport = Excel::toArray(new CollectionsImport, storage_path('app/'.$this->filepath))[0];
        $ignoredData=[];
        
        foreach($dataImport as $item){
            // [site_sinoe] => dolores quasi corporis
            // [site_denomination] => soluta suscipit reprehenderit
            // [site_categorie] => TMB
            // [site_mode_de_gestion] => Gestion privée
            // [site_ville] =>
            // [acteur_1_type] =>
            // [acteur_1_siren] =>
            // [acteur_1_nom] =>
            // [acteur_1_city] =>
            // [acteur_2_type] =>
            // [acteur_2_siren] =>
            // [acteur_2_nom] =>
            // [acteur_2_city] =>
            // [contractant_sinoe] =>
            // [contractant_groupe] =>
            // [contractant_denomination] => ut et
            // [debut_du_contrat] => 15/01/2022
            // [fin_du_contrat] => 31/01/2022

            $site = Site::where('sinoe', $item['site_sinoe'])->first();
            $exploitant = SocieteExploitant::where('sinoe', $item['contractant_sinoe'])->first();

            $number_of_actors = array_reduce(array_keys($item), function($count, $item){
                return $count + (str_contains($item, "acteur") ? 1 : 0);
            }, 0) / 4;

            if($site && $exploitant && $number_of_actors > 0){
                
                $contract = Contrat::create([
                    'id_site' => $site->id_site,
                    'contractant' => $exploitant->id_societe_exploitant,
                    'dateDebut' => $item['debut_du_contrat'],
                    'dateFin' => $item['fin_du_contrat'],
                ]);

                if($contract){

                    for($i = 1; $i <= $number_of_actors; $i++){
                        $actor = [
                            "type" => $item["acteur_$i"."_type"], 
                            "siren" => $item["acteur_$i"."_siren"],
                        ];

                        if($actor['type'] == "Syndicat"){
                            $syndicat = Syndicat::where('serin', $actor['siren'])->first();
                            if(!$syndicat) continue;
                            CommunHasContrat::create([
                                "id_contrat"=> $contract->id_contrat,
                                "typePersonMoral"=> "Syndicat",
                                "idPersonMoral"=> $syndicat->id_syndicat
                            ]);
                        }else if($actor['type'] == "Commune"){
                            $commune = Commune::where('serin', $actor['siren'])->first();
                            if(!$commune) continue;

                            CommunHasContrat::create([
                                "id_contrat"=> $contract->id_contrat,
                                "typePersonMoral"=> "Commune",
                                "idPersonMoral"=> $commune->id_commune
                            ]);
                        }else if($actor['type'] == "Epic"){
                            $epic = EPIC::where('serin', $actor['siren'])->first();
                            if(!$epic) continue;
                            
                            CommunHasContrat::create([
                                "id_contrat"=> $contract->id_contrat,
                                "typePersonMoral"=> "Epic",
                                "idPersonMoral"=> $epic->id_epic
                            ]);

                        }
                    }
                }else{
                    $item['problème trouvé'] = "Erreur de sauvgarde";
                    $ignoredData[] = $item;
                }
            }else{
                $item['problème trouvé'] = '';
                if(!$site){
                    $item['problème trouvé'] .= "Site invalid, ";
                }
                if(!$syndicat){
                    $item['problème trouvé'] .= "Syndicat invalid, ";
                }
                if(!$exploitant){
                    $item['problème trouvé'] .= "Exploitant invalid.";
                }
                $ignoredData[] = $item;
            }
        }

        $filename= "exports/ContractUVEExploitant/".md5("contrat_exports".time());
        $fileResult= Excel::store(new CollectionsExport($ignoredData), $filename.".xlsx");
        $this->user->notify(new DataImportsNotif([
            'title'=>'La list des contract importé avec succès',
            'description'=>'subDescData',
            'logo'=>'/media/svg/icons/Costum/ImportSuccess.svg',
            'action'=>env('APP_HOTS_URL')."imports/download/".str_replace('/','_',$filename),
        ]));
        // broadcast(new UserNotification([
        //     'async'=>true
        // ],$this->user->user_channel));
    }
    public function failed(Throwable $exception)
    {
        $this->user->notify(new DataImportsNotif([
            'title'=>"Erreur lors de l'importation des contrats",
            'description'=>'subDescData',
            'logo'=>'/media/svg/icons/Costum/WarningReqeust.svg',
            'action'=>'/contrat',
        ]));
        // broadcast(new UserNotification([
        //     'async'=>true
        // ],$this->user->user_channel));
    }
}


